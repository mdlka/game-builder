# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      # Runs a single command using the runners shell
      - name: Start Build
        run: echo Build is started!

      - name: Unity - Test runner
        uses: game-ci/unity-test-runner@v3.1.0
        with:
          # Version of unity to use for testing the project. Use "auto" to get from your ProjectSettings/ProjectVersion.txt. ⚠️ If testing a Unity Package, this field is required and cannot be set to "auto".
          unityVersion: auto
          # Specific docker image that should be used for testing the project. If packageMode is true, this image must have jq installed.
          #customImage: # optional, default is 
          # Path to the Unity project or package to be tested.
          #projectPath: # optional
          # Extra parameters to configure the Unity editor run.
          #customParameters: # optional
          # The type of tests to be run by the test runner.
          #testMode: # optional, default is all
          # Optional coverage parameters for the -coverageOptions argument. To get coverage in Package Mode, pass assemblies from the package you want covered to the assemblyFilters option.
          #coverageOptions: # optional, default is generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;dontClear
          # Path where test artifacts should be stored.
          #artifactsPath: # optional, default is artifacts
          # Initialises Docker using the host network.
          #useHostNetwork: # optional
          # SSH Agent path to forward to the container.
          #sshAgent: # optional, default is 
          # Path to a directory containing SSH public keys to forward to the container.
          #sshPublicKeysDirectoryPath: # optional, default is 
          # GitHub Private Access Token (PAT) to pull from GitHub.
          #gitPrivateToken: # optional, default is 
          # Token to authorize access to the GitHub REST API. If provided, a check run will be created with the test results.
          #githubToken: # optional, default is 
          # Name for the check run that is created when a github token is provided.
          #checkName: # optional, default is Test Results
          # Whether the tests are being run for a Unity package instead of a Unity project. If true, the action can only be run on Linux runners, and any custom docker image passed to this action must have `jq` installed. NOTE: may not work properly for packages with dependencies outside of the Unity Registry.
          #packageMode: # optional
          # User and optionally group (user or user:group or uid:gid) to give ownership of the resulting build artifacts
          #chownFilesTo: # optional, default is 
          # Url to a unity license server for acquiring floating licenses.
          #unityLicensingServer: # optional, default is 

      - name: Unity - Builder
        uses: game-ci/unity-builder@v3.1.0
        with:
          # Platform that the build should target.
          targetPlatform: WebGL
          # Version of unity to use for building the project. Use "auto" to get from your ProjectSettings/ProjectVersion.txt
          unityVersion: auto
          # Specific docker image that should be used for building the project
          #customImage: # optional, default is 
          # Relative path to the project to be built.
          #projectPath: # optional, default is 
          # Name of the build. Should not include a file extension.
          #buildName: # optional, default is 
          # Path where the builds should be stored.
          #buildsPath: # optional, default is 
          # Path to a Namespace.Class.StaticMethod to run to perform the build.
          #buildMethod: # optional, default is 
          # Custom parameters to configure the build.
          #customParameters: # optional, default is 
          # The versioning scheme to use when building the project
          #versioning: # optional, default is Semantic
          # The version, when used with the "Custom" versioning scheme
          #version: # optional, default is 
          # The android versionCode
          #androidVersionCode: # optional, default is 
          # The android export type. Should be androidPackage for apk, androidAppBundle for aab, or androidStudioProject for an android studio project.
          #androidExportType: # optional, default is androidPackage
          # The android keystoreName
          #androidKeystoreName: # optional, default is 
          # The base64 contents of the android keystore file
          #androidKeystoreBase64: # optional, default is 
          # The android keystorePass
          #androidKeystorePass: # optional, default is 
          # The android keyaliasName
          #androidKeyaliasName: # optional, default is 
          # The android keyaliasPass
          #androidKeyaliasPass: # optional, default is 
          # The android target API level.
          #androidTargetSdkVersion: # optional, default is 
          # The android symbol type to export. Should be "none", "public" or "debugging".
          #androidSymbolType: # optional, default is none
          # SSH Agent path to forward to the container
          #sshAgent: # optional, default is 
          # Path to a directory containing SSH public keys to forward to the container.
          #sshPublicKeysDirectoryPath: # optional, default is 
          # [CloudRunner] Github private token to pull from github
          #gitPrivateToken: # optional, default is 
          # [CloudRunner] GitHub owner name or organization/team name
          #githubOwner: # optional, default is 
          # User and optionally group (user or user:group or uid:gid) to give ownership of the resulting build artifacts
          #chownFilesTo: # optional, default is 
          # [CloudRunner] Allows the branch of the build to be dirty, and still generate the build.
          #allowDirtyBuild: # optional, default is 
          # [CloudRunner] run a post build job in yaml format with the keys image, secrets (name, value object array), command string
          #postBuildSteps: # optional, default is 
          # [CloudRunner] Run a pre build job after the repository setup but before the build job (in yaml format with the keys image, secrets (name, value object array), command line string)
          #preBuildSteps: # optional, default is 
          # [CloudRunner] Specify the names (by file name) of custom steps to run before or after cloud runner jobs, must match a yaml step file inside your repo in the folder .game-ci/steps/
          #containerHookFiles: # optional, default is 
          # [CloudRunner] Specify the names (by file name) of custom hooks to run before or after cloud runner jobs, must match a yaml step file inside your repo in the folder .game-ci/hooks/
          #customHookFiles: # optional, default is 
          # [CloudRunner] Specify custom commands and trigger hooks (injects commands into jobs)
          #customCommandHooks: # optional, default is 
          # [CloudRunner] Run a custom job instead of the standard build automation for cloud runner (in yaml format with the keys image, secrets (name, value object array), command line string)
          #customJob: # optional, default is 
          # [CloudRunner] The Cloud Formation stack name that must be setup before using this option.
          #awsStackName: # optional, default is game-ci
          # [CloudRunner] Either local, k8s or aws can be used to run builds on a remote cluster. Additional parameters must be configured.
          #providerStrategy: # optional, default is local
          # [CloudRunner] Amount of CPU time to assign the remote build container
          #cloudRunnerCpu: # optional, default is 
          # [CloudRunner] Amount of memory to assign the remote build container
          #cloudRunnerMemory: # optional, default is 
          # [CloudRunner] Comma separated list of input value names to read from "input override command"
          #readInputFromOverrideList: # optional, default is 
          # [CloudRunner] Extend game ci by specifying a command to execute to pull input from external source e.g cloud provider secret managers
          #readInputOverrideCommand: # optional, default is 
          # [CloudRunner] Supply a base64 encoded kubernetes config to run builds on kubernetes and stream logs until completion.
          #kubeConfig: # optional, default is 
          # [CloudRunner] Supply a Persistent Volume Claim name to use for the Unity build.
          #kubeVolume: # optional, default is 
          # [CloudRunner] Kubernetes storage class to use for cloud runner jobs, leave empty to install rook cluster.
          #kubeStorageClass: # optional, default is 
          # [CloudRunner] Amount of disc space to assign the Kubernetes Persistent Volume
          #kubeVolumeSize: # optional, default is 5Gi
          # [CloudRunner] Cache key to indicate bucket for cache
          #cacheKey: # optional, default is 
          # [CloudRunner] Whether or not to watch the build to the end. Can be used for especially long running jobs e.g imports or self-hosted ephemeral runners.
          #watchToEnd: # optional, default is true
          # Whether to cache the Unity hub and editor installation on MacOS
          #cacheUnityInstallationOnMac: # optional, default is false
          # The version of Unity Hub to install on MacOS (e.g. 3.4.0). Defaults to latest available on brew if empty string or nothing is specified.
          #unityHubVersionOnMac: # optional, default is 
          # The Unity licensing server address to use for activating Unity.
          #unityLicensingServer: # optional, default is 
          # The path to mount the workspace inside the docker container. For windows, leave out the drive letter. For example c:/github/workspace should be defined as /github/workspace
          #dockerWorkspacePath: # optional, default is /github/workspace
      
      # Runs a single command using the runners shell
      - name: End Build
        run: echo Build is completed!
